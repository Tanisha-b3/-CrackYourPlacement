Word Search


class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length, n = board[0].length;

        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(board[i][j] == word.charAt(0) && helper(board, i, j, word, 0, new boolean[m][n]))
                    return true;
            }
        }

        return false;
    }

    private boolean helper(char[][] board, int i, int j, String word, int ptr, boolean[][] visited) {
        if(ptr == word.length())
            return true;
        
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j])
            return false;
        
        if(board[i][j] != word.charAt(ptr))
            return false;
        
        visited[i][j] = true;
        
        boolean res = 
            helper(board, i-1, j, word, ptr+1, visited) || 
            helper(board, i+1, j, word, ptr+1, visited) || 
            helper(board, i, j-1, word, ptr+1, visited) || 
            helper(board, i, j+1, word, ptr+1, visited);
        
        visited[i][j] = false;

        return res;
    }
}
