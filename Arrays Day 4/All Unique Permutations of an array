All Unique Permutations of an array


class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
       Collections.sort(arr);
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        ans.add(new ArrayList<>(arr));
        
        while (nextPermutation(arr)) {
            ans.add(new ArrayList<>(arr));
        }
        
        return ans;
    }

    private static boolean nextPermutation(ArrayList<Integer> nums) {
        int i = nums.size() - 2;
        while (i >= 0 && nums.get(i) >= nums.get(i + 1)) {
            i--;
        }
        if (i < 0) {
            return false;
        }
        
        int j = nums.size() - 1;
        
       
        while (nums.get(j) <= nums.get(i)) {
            j--;
        }
        Collections.swap(nums, i, j);
        
        reverse(nums, i + 1);
        
        return true;
    }

    private static void reverse(ArrayList<Integer> nums, int start) {
        int end = nums.size() - 1;
        while (start < end) {
            Collections.swap(nums, start, end);
            start++;
            end--;
        }
    }
}
